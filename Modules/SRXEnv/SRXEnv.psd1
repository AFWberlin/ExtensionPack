#
# Module manifest for module 'SRXEnv'
#
# Generated by: ScriptRunner
#
# Generated on: 07/17/2019
#
# Build: 6.0.105.99
#
@{

# Script module or binary module file associated with this manifest.
RootModule = 'SRXEnv.psm1'

# Version number of this module.
ModuleVersion = '1.0'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = 'aefd9643-1c55-44b4-8d7b-9f9db8eb4855'

# Author of this module
Author = 'ScriptRunner'

# Company or vendor of this module
CompanyName = 'ScriptRunner Software GmbH'

# Copyright statement for this module
Copyright = '(c) 2019 ScriptRunner Software GmbH. All rights reserved.'

# Description of the functionality provided by this module
Description = "Provides the ScriptRunner PowerShell Host Environment Variable `$SRXEnv for test and developement purposes.


The SRXEnv hashtable provides the following keys:

[string]ReportEmail:
If you have an SMTP server available, the ScriptRunner service can send you email notifications containing execution reports,
on error or on success.
Recipient email address (comma separated list). The full action report will be sent to this address.

[string]ResultEmail:
Recipient email addresses (comma separated list). Only the ResultMessage will be sent to this address.

[ArrayList]ResultList:
A scripted query must specify this list of string values. The list is associated with the corresponding action parameter.

[ArrayList]ResultList2:
A scripted query can specify this optional list of display names. The list appears as drop-down list for the associated action parameter.

[string]ResultMessage:
This message will show in the reports, and in the immediate result window of the Delegate and Self-Service App.

[string]ResultObjectJSON:
The script can now provide (simple) structured result data by writing a (small) JSON string to `$SRXEnv.ResultObjectJSON.
ScriptRunner will provide this JSON string in the OutSerializedPSObjects report field, for post-processing by
the caller of the Web Service Connector.

[DateTime]SRXStarted:
The timestamp of the start of the script execution. (readonly)

[string]SRXStartedBy:
The user account that requested the execution of the script. (readonly)

[string]SRXStartedIP:
IP address of the client that sent the request to perform the script execution. (readonly)

[string]SRXStartedVia:
Name of the application that started the execution of the script. (readonly)
"

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '3.0'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @('Reset-SRXEnvironment')

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @('SRXEnv')

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = @('ScriptRunner','PSEdition_Desktop','PSEdition_Core','Windows','Linux','MacOS')

        # A URL to the license for this module.
        LicenseUri = 'https://github.com/scriptrunner/ExtensionPack/tree/master/Modules/SRXEnv/license.txt'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/scriptrunner/ExtensionPack/tree/master/Modules/SRXEnv'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        # ReleaseNotes = ''

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}


# SIG # Begin signature block
# MIIa6wYJKoZIhvcNAQcCoIIa3DCCGtgCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBFY1uPye2DRvHP
# pIcYo+4+CyNes0/WCbix0aWtdA8Z76CCCWwwggSZMIIDgaADAgECAhBxoLc2ld2x
# r8I7K5oY7lTLMA0GCSqGSIb3DQEBCwUAMIGpMQswCQYDVQQGEwJVUzEVMBMGA1UE
# ChMMdGhhd3RlLCBJbmMuMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNlcnZpY2Vz
# IERpdmlzaW9uMTgwNgYDVQQLEy8oYykgMjAwNiB0aGF3dGUsIEluYy4gLSBGb3Ig
# YXV0aG9yaXplZCB1c2Ugb25seTEfMB0GA1UEAxMWdGhhd3RlIFByaW1hcnkgUm9v
# dCBDQTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDkyMzU5NTlaMEwxCzAJBgNVBAYT
# AlVTMRUwEwYDVQQKEwx0aGF3dGUsIEluYy4xJjAkBgNVBAMTHXRoYXd0ZSBTSEEy
# NTYgQ29kZSBTaWduaW5nIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
# AQEAm1UCTBcF6dBmw/wordPA/u/g6X7UHvaqG5FG/fUW7ZgHU/q6hxt9nh8BJ6u5
# 0mfKtxAlU/TjvpuQuO0jXELvZCVY5YgiGr71x671voqxERGTGiKpdGnBdLZoh6eD
# MPlk8bHjOD701sH8Ev5zVxc1V4rdUI0D+GbNynaDE8jXDnEd5GPJuhf40bnkiNIs
# KMghIA1BtwviL8KA5oh7U2zDRGOBf2hHjCsqz1v0jElhummF/WsAeAUmaRMwgDhO
# 8VpVycVQ1qo4iUdDXP5Nc6VJxZNp/neWmq/zjA5XujPZDsZC0wN3xLs5rZH58/eW
# XDpkpu0nV8HoQPNT8r4pNP5f+QIDAQABo4IBFzCCARMwLwYIKwYBBQUHAQEEIzAh
# MB8GCCsGAQUFBzABhhNodHRwOi8vdDIuc3ltY2IuY29tMBIGA1UdEwEB/wQIMAYB
# Af8CAQAwMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL3QxLnN5bWNiLmNvbS9UaGF3
# dGVQQ0EuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDAzAOBgNVHQ8B
# Af8EBAMCAQYwKQYDVR0RBCIwIKQeMBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEt
# NTY4MB0GA1UdDgQWBBRXhptUuL6mKYrk9sLiExiJhc3ctzAfBgNVHSMEGDAWgBR7
# W0XPr87Lev0xkhpqtvNG61dIUDANBgkqhkiG9w0BAQsFAAOCAQEAJDv116A2E8dD
# /vAJh2jRmDFuEuQ/Hh+We2tMHoeei8Vso7EMe1CS1YGcsY8sKbfu+ZEFuY5B8Sz2
# 0FktmOC56oABR0CVuD2dA715uzW2rZxMJ/ZnRRDJxbyHTlV70oe73dww78bUbMyZ
# NW0c4GDTzWiPKVlLiZYIRsmO/HVPxdwJzE4ni0TNB7ysBOC1M6WHn/TdcwyR6hKB
# b+N18B61k2xEF9U+l8m9ByxWdx+F3Ubov94sgZSj9+W3p8E3n3XKVXdNXjYpyoXY
# RUFyV3XAeVv6NBAGbWQgQrc6yB8dRmQCX8ZHvvDEOihU2vYeT5qiGUOkb0n4/F5C
# ICiEi0cgbjCCBMswggOzoAMCAQICEFPsAD3ofN7WA02J3aSXLqswDQYJKoZIhvcN
# AQELBQAwTDELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEmMCQG
# A1UEAxMddGhhd3RlIFNIQTI1NiBDb2RlIFNpZ25pbmcgQ0EwHhcNMTcwNDEzMDAw
# MDAwWhcNMjAwNDEyMjM1OTU5WjCBiDELMAkGA1UEBhMCREUxGzAZBgNVBAgMEkJh
# ZGVuLVd1ZXJ0dGVtYmVyZzESMBAGA1UEBwwJRXR0bGluZ2VuMRUwEwYDVQQKDAxB
# cHBTcGhlcmUgQUcxGjAYBgNVBAsMEVNvZnR3YXJlIFByb2R1Y3RzMRUwEwYDVQQD
# DAxBcHBTcGhlcmUgQUcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDy
# kpPGQ2ADg5zJD6tDuzMNzG9wZZfU4+qkh0UrJ/dBjO0fwlRQ4FxLtGWUivPXKnNw
# qHI1wqPes1OOklFF5rt6mb83r9QRtZfFr2dmGYA6m2x3dWzFR4Ni+22s6H8KrU8p
# XHjQLIdckzF16hyv0WPxt74gerwFfWqJWE4wHHQQoVS3A19bYFwKU35GlGdf83JY
# vI2hsBq5qjZwjvt99xwe5ywQy5ZmbDd0B/WlwZ2YTxKit02RsT0iWAe8ORCAb3ba
# tOVsn5y3U4MYmyTDHD6kpgxLjvybTNn0vvX+EnrgncJl8VqZqeiACCpL1lQtju+K
# Mwz2k/KT5GslEB85gP/BAgMBAAGjggFqMIIBZjAJBgNVHRMEAjAAMB8GA1UdIwQY
# MBaAFFeGm1S4vqYpiuT2wuITGImFzdy3MB0GA1UdDgQWBBR7LxhQwEcEPWshWTXX
# 9lpgIh7zIDArBgNVHR8EJDAiMCCgHqAchhpodHRwOi8vdGwuc3ltY2IuY29tL3Rs
# LmNybDAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwbgYDVR0g
# BGcwZTBjBgZngQwBBAEwWTAmBggrBgEFBQcCARYaaHR0cHM6Ly93d3cudGhhd3Rl
# LmNvbS9jcHMwLwYIKwYBBQUHAgIwIwwhaHR0cHM6Ly93d3cudGhhd3RlLmNvbS9y
# ZXBvc2l0b3J5MFcGCCsGAQUFBwEBBEswSTAfBggrBgEFBQcwAYYTaHR0cDovL3Rs
# LnN5bWNkLmNvbTAmBggrBgEFBQcwAoYaaHR0cDovL3RsLnN5bWNiLmNvbS90bC5j
# cnQwDQYJKoZIhvcNAQELBQADggEBAD71afAJsSV8c3gqKSn4d7g727hmCOhvUFgN
# 8wD4CD26UxqeieL/KmX8hk0cdhKqtEqpYiNsYWCauVMro8+trN6/ybOnlRC76gi8
# eOuE5O/OdVATY1VMdRwZ8APaNV86vFq7fPaTrJvg24DPrf5eiRysNHTGQ79rrtRk
# B5VTBR8W0oSi+ROhibj7/ad8OvYiLMJL+AK8Dh399DE4gb5V+sastXlLn4otHsA3
# LnF5yqGLsvudMmfuYTwioHJTHEfLdtqrAZ4j2LeiA/RZF6qV64sluxMwiaYAysfU
# 1+O+7U+OmPrgOXkGev/BOgIo5zKak4nbfcx6iiEhmrtGSz9HrkUxghDVMIIQ0QIB
# ATBgMEwxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwx0aGF3dGUsIEluYy4xJjAkBgNV
# BAMTHXRoYXd0ZSBTSEEyNTYgQ29kZSBTaWduaW5nIENBAhBT7AA96Hze1gNNid2k
# ly6rMA0GCWCGSAFlAwQCAQUAoHwwEAYKKwYBBAGCNwIBDDECMAAwGQYJKoZIhvcN
# AQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUw
# LwYJKoZIhvcNAQkEMSIEIE8/8tudG4O2IOjQPeRZ/SsZP+qOF1BKW+FUvk986y+X
# MA0GCSqGSIb3DQEBAQUABIIBALIoy/jCL/TrcUYCCKbaZR86QWDSi8tomDIq1+fk
# yS9ZJB+jOFjgOIkHrWUtKSD+No9xZBLHgyzPcIxWw1sdbNJCgyQXxF/62kcPC/zt
# v3I9D7BMceOmMSbt4ZyqbS8H9EYi0Es3XMfqh8NGDUC+r3McNThgcz2VaSJJbGUL
# VHpZiFtSEOjYva5hLGOJny+hXLbWoXCH6aDw9FlkU+J6SETLP9hC3OKS/DBE0wIA
# L5poXy+J6rFbVNQFLEIfCrUhZZUrZ7z79tWCQAwdTFs2ZzWxlWccwl8OlgVZmidk
# he8XYGLfpyKWUXmFbOuLMh8AQwQ77+PCoSyrS4EAhfgFMgGhgg7IMIIOxAYKKwYB
# BAGCNwMDATGCDrQwgg6wBgkqhkiG9w0BBwKggg6hMIIOnQIBAzEPMA0GCWCGSAFl
# AwQCAQUAMHcGCyqGSIb3DQEJEAEEoGgEZjBkAgEBBglghkgBhv1sBwEwMTANBglg
# hkgBZQMEAgEFAAQgKuc6ytQaTOS61KUS2r5ELYz5ooMt+IfKutaqpgezwZUCEC4V
# ZdlesI/zZmaWEZeKlckYDzIwMTkwNzE3MTQyMTQzWqCCC7swggaCMIIFaqADAgEC
# AhAJwPxGyARCE7VZi68oT05BMA0GCSqGSIb3DQEBCwUAMHIxCzAJBgNVBAYTAlVT
# MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
# b20xMTAvBgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJlZCBJRCBUaW1lc3RhbXBp
# bmcgQ0EwHhcNMTcwMTA0MDAwMDAwWhcNMjgwMTE4MDAwMDAwWjBMMQswCQYDVQQG
# EwJVUzERMA8GA1UEChMIRGlnaUNlcnQxKjAoBgNVBAMTIURpZ2lDZXJ0IFNIQTIg
# VGltZXN0YW1wIFJlc3BvbmRlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
# ggEBAJ6VmGo0O3MbqH78x74paYnHaCZGXz2NYnOHgaOhnPC3WyQ3WpLU9FnXdonk
# 3NUn8NVmvArutCsxZ6xYxUqRWStFHgkB1mSzWe6NZk37I17MEA0LimfvUq6gCJDC
# Uvf1qLVumyx7nee1Pvt4zTJQGL9AtUyMu1f0oE8RRWxCQrnlr9bf9Kd8CmiWD9Jf
# KVfO+x0y//QRoRMi+xLL79dT0uuXy6KsGx2dWCFRgsLC3uorPywihNBD7Ds7P0fE
# 9lbcRTeYtGt0tVmveFdpyA8JAnjd2FPBmdtgxJ3qrq/gfoZKXKlYYahedIoBKGhy
# TqeGnbUCUodwZkjTju+BJMzc2GUCAwEAAaOCAzgwggM0MA4GA1UdDwEB/wQEAwIH
# gDAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMIIBvwYDVR0g
# BIIBtjCCAbIwggGhBglghkgBhv1sBwEwggGSMCgGCCsGAQUFBwIBFhxodHRwczov
# L3d3dy5kaWdpY2VydC5jb20vQ1BTMIIBZAYIKwYBBQUHAgIwggFWHoIBUgBBAG4A
# eQAgAHUAcwBlACAAbwBmACAAdABoAGkAcwAgAEMAZQByAHQAaQBmAGkAYwBhAHQA
# ZQAgAGMAbwBuAHMAdABpAHQAdQB0AGUAcwAgAGEAYwBjAGUAcAB0AGEAbgBjAGUA
# IABvAGYAIAB0AGgAZQAgAEQAaQBnAGkAQwBlAHIAdAAgAEMAUAAvAEMAUABTACAA
# YQBuAGQAIAB0AGgAZQAgAFIAZQBsAHkAaQBuAGcAIABQAGEAcgB0AHkAIABBAGcA
# cgBlAGUAbQBlAG4AdAAgAHcAaABpAGMAaAAgAGwAaQBtAGkAdAAgAGwAaQBhAGIA
# aQBsAGkAdAB5ACAAYQBuAGQAIABhAHIAZQAgAGkAbgBjAG8AcgBwAG8AcgBhAHQA
# ZQBkACAAaABlAHIAZQBpAG4AIABiAHkAIAByAGUAZgBlAHIAZQBuAGMAZQAuMAsG
# CWCGSAGG/WwDFTAfBgNVHSMEGDAWgBT0tuEgHf4prtLkYaWyoiWyyBc1bjAdBgNV
# HQ4EFgQU4acySu4BISh9VNXyB5JutAcPPYcwcQYDVR0fBGowaDAyoDCgLoYsaHR0
# cDovL2NybDMuZGlnaWNlcnQuY29tL3NoYTItYXNzdXJlZC10cy5jcmwwMqAwoC6G
# LGh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9zaGEyLWFzc3VyZWQtdHMuY3JsMIGF
# BggrBgEFBQcBAQR5MHcwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0
# LmNvbTBPBggrBgEFBQcwAoZDaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0Rp
# Z2lDZXJ0U0hBMkFzc3VyZWRJRFRpbWVzdGFtcGluZ0NBLmNydDANBgkqhkiG9w0B
# AQsFAAOCAQEAHvBBgjKu7fG0NRPcUMLVl64iIp0ODq8z00z9fL9vARGnlGUiXMYi
# ociJUmuajHNc2V4/Mt4WYEyLNv0xmQq9wYS3jR3viSYTBVbzR81HW62EsjivaiO1
# ReMeiDJGgNK3ppki/cF4z/WL2AyMBQnuROaA1W1wzJ9THifdKkje2pNlrW5lo5mn
# wkAOc8xYT49FKOW8nIjmKM5gXS0lXYtzLqUNW1Hamk7/UAWJKNryeLvSWHiNRKes
# OgCReGmJZATTXZbfKr/5pUwsk//mit2CrPHSs6KGmsFViVZqRz/61jOVQzWJBXha
# OmnaIrgEQ9NvaDU2ehQ+RemYZIYPEwwmSjCCBTEwggQZoAMCAQICEAqhJdbWMht+
# QeQF2jaXwhUwDQYJKoZIhvcNAQELBQAwZTELMAkGA1UEBhMCVVMxFTATBgNVBAoT
# DERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTEkMCIGA1UE
# AxMbRGlnaUNlcnQgQXNzdXJlZCBJRCBSb290IENBMB4XDTE2MDEwNzEyMDAwMFoX
# DTMxMDEwNzEyMDAwMFowcjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0
# IEluYzEZMBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTExMC8GA1UEAxMoRGlnaUNl
# cnQgU0hBMiBBc3N1cmVkIElEIFRpbWVzdGFtcGluZyBDQTCCASIwDQYJKoZIhvcN
# AQEBBQADggEPADCCAQoCggEBAL3QMu5LzY9/3am6gpnFOVQoV7YjSsQOB0UzURB9
# 0Pl9TWh+57ag9I2ziOSXv2MhkJi/E7xX08PhfgjWahQAOPcuHjvuzKb2Mln+X2U/
# 4Jvr40ZHBhpVfgsnfsCi9aDg3iI/Dv9+lfvzo7oiPhisEeTwmQNtO4V8CdPuXcia
# C1TjqAlxa+DPIhAPdc9xck4Krd9AOly3UeGheRTGTSQjMF287DxgaqwvB8z98OpH
# 2YhQXv1mblZhJymJhFHmgudGUP2UKiyn5HU+upgPhH+fMRTWrdXyZMt7HgXQhBly
# F/EXBu89zdZN7wZC/aJTKk+FHcQdPK/P2qwQ9d2srOlW/5MCAwEAAaOCAc4wggHK
# MB0GA1UdDgQWBBT0tuEgHf4prtLkYaWyoiWyyBc1bjAfBgNVHSMEGDAWgBRF66Kv
# 9JLLgjEtUYunpyGd823IDzASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQE
# AwIBhjATBgNVHSUEDDAKBggrBgEFBQcDCDB5BggrBgEFBQcBAQRtMGswJAYIKwYB
# BQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBDBggrBgEFBQcwAoY3aHR0
# cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENB
# LmNydDCBgQYDVR0fBHoweDA6oDigNoY0aHR0cDovL2NybDQuZGlnaWNlcnQuY29t
# L0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDA6oDigNoY0aHR0cDovL2NybDMu
# ZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDBQBgNVHSAE
# STBHMDgGCmCGSAGG/WwAAgQwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGln
# aWNlcnQuY29tL0NQUzALBglghkgBhv1sBwEwDQYJKoZIhvcNAQELBQADggEBAHGV
# EulRh1Zpze/d2nyqY3qzeM8GN0CE70uEv8rPAwL9xafDDiBCLK938ysfDCFaKrcF
# NB1qrpn4J6JmvwmqYN92pDqTD/iy0dh8GWLoXoIlHsS6HHssIeLWWywUNUMEaLLb
# dQLgcseY1jxk5R9IEBhfiThhTWJGJIdjjJFSLK8pieV4H9YLFKWA1xJHcLN11ZOF
# k362kmf7U2GJqPVrlsD0WGkNfMgBsbkodbeZY4UijGHKeZR+WfyMD+NvtQEmtmyl
# 7odRIeRYYJu6DC0rbaLEfrvEJStHAgh8Sa4TtuF8QkIoxhhWz0E0tmZdtnR79VYz
# Ii8iNrJLokqV2PWmjlIxggJNMIICSQIBATCBhjByMQswCQYDVQQGEwJVUzEVMBMG
# A1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMTEw
# LwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQgSUQgVGltZXN0YW1waW5nIENB
# AhAJwPxGyARCE7VZi68oT05BMA0GCWCGSAFlAwQCAQUAoIGYMBoGCSqGSIb3DQEJ
# AzENBgsqhkiG9w0BCRABBDAcBgkqhkiG9w0BCQUxDxcNMTkwNzE3MTQyMTQzWjAr
# BgsqhkiG9w0BCRACDDEcMBowGDAWBBRAAZFHXJiJHeuhBK9HCRtettTLyzAvBgkq
# hkiG9w0BCQQxIgQgFhM/B4RBjWyBs1T+G2krXSWV6Unxdsf3GYmD4ed40qYwDQYJ
# KoZIhvcNAQEBBQAEggEACzfGnsQ7ZiXrEpZsxucS3LdBBEU5Cv1iwSvcZVxQXDWf
# +bx7vwPW1H34UW/bKDOvimNDgYYdSa/XHdVShEwB4FcDPr5+kV6VKo7HJlQHz62n
# mk8NcNUmbagQiiLT+mEnbfCmae/OxMUIPltXKlICbAWfzvLGYyjBYuqCMkYMLXsI
# mN0EXBiJwc9iBLueIHrc60RHHwdBJgdZY+7i00NnmMgT/5S74grn502obJUwxGdi
# aDtjvwgGYRHIqMPQPqkWSLO2dJ0tAhdpddWx5mlt1aFFN8/5TniPz5XJFznJrXTX
# KN5/V7ug01rFoWAsZzjTfzhGg8gIsTH7uOPNIZLGBg==
# SIG # End signature block
